@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Models.front

<div class="w-full max-w-md p-8 space-y-6 bg-gray-900/95 rounded-2xl shadow-2xl mx-auto mt-12 text-gray-200">
    <div class="flex justify-center">
        <div class="bg-indigo-700 rounded-full p-2 shadow-lg">
            <img src="/logo.png" alt="Fixaroo Logo" class="w-20 h-20" />
        </div>
    </div>

    <h2 class="text-center text-xl font-semibold text-gray-200">
        Create your account.
    </h2>

    <EditForm Model="@registerModel" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <div class="space-y-4">
            <InputText @bind-Value="registerModel.Email"
                       class="w-full px-4 py-3 rounded-lg border border-gray-700 bg-gray-800 placeholder-gray-500 text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       type="email" placeholder="Email" disabled="@isLoading" />
            <ValidationMessage For="@(() => registerModel.Email)" class="text-red-500 text-sm" />

            <InputText @bind-Value="registerModel.Name"
                       class="w-full px-4 py-3 rounded-lg border border-gray-700 bg-gray-800 placeholder-gray-500 text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       type="text" placeholder="Name" disabled="@isLoading" />
            <ValidationMessage For="@(() => registerModel.Name)" class="text-red-500 text-sm" />

            <InputText @bind-Value="registerModel.Surname"
                       class="w-full px-4 py-3 rounded-lg border border-gray-700 bg-gray-800 placeholder-gray-500 text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       type="text" placeholder="Surname" disabled="@isLoading" />
            <ValidationMessage For="@(() => registerModel.Surname)" class="text-red-500 text-sm" />

            <InputText @bind-Value="registerModel.Password"
                       class="w-full px-4 py-3 rounded-lg border border-gray-700 bg-gray-800 placeholder-gray-500 text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       type="password" placeholder="Password" disabled="@isLoading" />
            <ValidationMessage For="@(() => registerModel.Password)" class="text-red-500 text-sm" />

            <InputText @bind-Value="registerModel.ConfirmPassword"
                       class="w-full px-4 py-3 rounded-lg border border-gray-700 bg-gray-800 placeholder-gray-500 text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       type="password" placeholder="Confirm Password" disabled="@isLoading" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-red-500 text-sm" />

            <button type="submit"
                    class="w-full py-3 rounded-lg bg-gradient-to-r from-indigo-600 to-purple-700 font-semibold text-white shadow-lg hover:from-indigo-700 hover:to-purple-800 hover:shadow-xl transition duration-300 flex justify-center items-center"
                    disabled="@isLoading">
                @if (isLoading)
                {
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                    </svg>
                    <span>Signing up...</span>
                }
                else
                {
                    <span>Sign Up</span>
                }
            </button>
        </div>
    </EditForm>

    <p class="text-center text-sm text-gray-500">
        Already have an account?
        <a href="/login" class="text-indigo-400 font-semibold hover:underline">Log in</a>
    </p>
</div>

@code {
    private RegisterFormModel registerModel = new();
    private bool isLoading = false;

    [Parameter]
    public EventCallback<RegisterFormModel> OnRegister { get; set; }

    private async Task OnSubmit()
    {
        isLoading = true;
        try
        {
            if (OnRegister.HasDelegate)
            {
                await OnRegister.InvokeAsync(registerModel);
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}
