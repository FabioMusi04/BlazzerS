@page "/profile"
@inject NavigationManager Navigation
@inject UserService UserService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>Profile</PageTitle>

<div class="bg-gray-900 min-h-screen py-12 px-4 sm:px-6 lg:px-8 text-white">
    <div class="max-w-5xl mx-auto space-y-10">
        <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
        <Alert AlertData="@AlertData2" OnDismissed="@(() => AlertData2.IsVisible = false)" />

        <div class="grid md:grid-cols-2 gap-6">
            <div class="bg-gray-800 rounded-2xl shadow p-6">
                <h2 class="text-xl font-semibold mb-4">Profile Info</h2>

                @if (IsLoadingUser)
                {
                    <p class="text-gray-400">Loading user...</p>
                }
                else if (UserData != null)
                {
                    <div class="space-y-4">
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-300">Profile Picture</label>

                            @if (!string.IsNullOrEmpty(ProfilePictureUrl))
                            {
                                <img src="@ProfilePictureUrl" class="h-24 w-24 rounded-full object-cover border border-gray-600" />
                            }

                            <InputFile OnChange="UploadProfilePicture"
                                       class="block text-sm text-gray-400 file:bg-indigo-600 file:text-white file:rounded file:border-0 file:px-4 file:py-1 hover:file:bg-indigo-700" />
                        </div>

                        <input class="bg-gray-700 border border-gray-600 p-3 rounded w-full" @bind="UserData.Name" placeholder="Name" />
                        <input class="bg-gray-700 border border-gray-600 p-3 rounded w-full" @bind="UserData.Surname" placeholder="Surname" />
                        <input class="bg-gray-800 text-gray-500 p-3 rounded w-full" value="@UserData.Email" disabled />
                        <p class="text-sm text-gray-400">Email confirmed: @UserData.EmailConfirmed</p>
                        <button class="w-full px-4 py-2 rounded bg-indigo-600 hover:bg-indigo-700 transition disabled:opacity-50"
                                disabled="@IsSaving"
                                @onclick="SaveUser">
                            @if (IsSaving)
                            {
                                <span class="animate-spin mr-2">🔄</span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                }
            </div>

            <div class="bg-gray-800 rounded-2xl shadow p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold">Active Devices</h2>
                    <button class="text-sm bg-red-600 hover:bg-red-700 text-white px-4 py-1 rounded disabled:opacity-50"
                            disabled="@IsProcessing"
                            @onclick="LogoutAllDevices">
                        Logout All
                    </button>
                </div>

                @if (IsLoadingSessions)
                {
                    <p class="text-gray-400">Loading sessions...</p>
                }
                else if (!Sessions.Any())
                {
                    <p class="text-gray-400">No active sessions.</p>
                }
                else
                {
                    <div class="space-y-3 overflow-y-auto max-h-[30vh] pr-1">
                        @foreach (var session in Sessions)
                        {
                            <div class="bg-gray-700 p-4 rounded-lg flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 shadow">
                                <div class="text-sm">
                                    <p><span class="font-semibold">IP:</span> @session.IPAddress</p>
                                    <p class="text-gray-400 truncate max-w-[200px]"><span class="font-semibold">Device:</span> @session.UserAgent</p>
                                    <p class="text-xs text-gray-500">Last seen: @session.LastAccessedAt?.ToLocalTime().ToString("g")</p>
                                </div>
                                <button class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm disabled:opacity-50"
                                        disabled="@IsProcessing"
                                        @onclick="@(() => LogoutDevice(session.DeviceId))">
                                    @if (IsProcessing)
                                    {
                                        <span class="animate-spin">⏳</span>
                                    }
                                    else
                                    {
                                        <span>Logout</span>
                                    }
                                </button>
                            </div>
                        }

                        @if (Sessions.Count < TotalSessions)
                        {
                            <div @ref="SessionObserverRef" class="h-8"></div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="bg-gray-700 rounded-2xl shadow p-6">
            <h2 class="text-xl font-semibold mb-4 text-indigo-300">Your Threads</h2>

            @if (IsLoadingPosts)
            {
                <p class="text-gray-400">Loading posts...</p>
            }
            else if (!Posts.Any())
            {
                <p class="text-gray-400">You haven't posted anything yet.</p>
            }
            else
            {
                <div class="space-y-4 overflow-y-auto max-h-[35vh] pr-1">
                    @foreach (var post in Posts)
                    {
                        <PostCard Post="post"
                                  ToggleComments="@(id => {})"
                                  LikePost="@(id => {})"
                                  SharePost="@(id => {})"
                                  IsCommentsVisible="false"
                                  Comments="new List<Comment>()" />
                    }

                    @if (Posts.Count < TotalPosts)
                    {
                        <div @ref="PostObserverRef" class="h-8"></div>
                    }
                </div>
            }
        </div>
    </div>
</div>


@code {
    User? UserData = null;
    string? ProfilePictureUrl = null;

    List<Post> Posts = new();
    List<UserSession> Sessions = new();

    private AlertModel AlertData = new();
    private AlertModel AlertData2 = new();

    private bool IsLoadingUser = true;
    private bool IsLoadingPosts = true;
    private bool IsLoadingSessions = true;
    private bool IsSaving = false;
    private bool IsProcessing = false;

    private bool IsLoadingMoreSessions = false;
    private bool IsLoadingMorePosts = false;

    private ElementReference SessionObserverRef;
    private ElementReference PostObserverRef;
    private int TotalSessions = 10;
    private int TotalPosts = 10;

    private bool _initialized = false;

    UserSessionsPaginatedRequest UserSessionsPaginatedRequest = new()
    {
        Page = 1,
        PageSize = 10
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadPosts();
        await LoadSessions();
    }

    private void GetProfilePictureUrl()
    {
        ProfilePictureUrl = UserData?.ProfileImage?.FilePath ?? "https://example.com/default-profile.png";
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized && SessionObserverRef.Context != null)
        {
            _initialized = true;

            await JSRuntime.InvokeVoidAsync("initInfiniteScroll",
                DotNetObjectReference.Create(this),
                SessionObserverRef);
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            IsLoadingUser = true;
            var response = await UserService.GetMeAsync();
            if (response.StatusCode is >= 200 and < 300)
            {
                UserData = response.User;
                GetProfilePictureUrl();            
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        finally
        {
            IsLoadingUser = false;
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            IsLoadingPosts = true;
            Posts = new List<Post>
            {
                new Post { Content = "Welcome to Threads!" },
                new Post { Content = "This is your second post." }
            };
        }
        finally
        {
            IsLoadingPosts = false;
        }
    }

    private async Task LoadSessions()
    {
        try
        {
            IsLoadingSessions = true;
            var sessionsResponse = await UserService.GetAllSessionsMe(UserSessionsPaginatedRequest);
            if (sessionsResponse.StatusCode is >= 200 and < 300)
            {
                Sessions = sessionsResponse.Items.ToList();
                TotalSessions = sessionsResponse.TotalCount;
            }
            else
            {
                AlertData = new()
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = "Failed to load sessions. Please try again later.",
                    Title = "Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
            }
        }
        finally
        {
            IsLoadingSessions = false;
        }
    }

    [JSInvokable]
    public async Task OnSessionObserverIntersect() => await LoadMoreSessions();

    private async Task LoadMoreSessions()
    {
        if (IsLoadingMoreSessions || Sessions.Count >= TotalSessions) return;
        IsLoadingMoreSessions = true;

        UserSessionsPaginatedRequest.Page += 1;
        var response = await UserService.GetAllSessionsMe(UserSessionsPaginatedRequest);
        if (response.StatusCode is >= 200 and < 300)
        {
            Sessions.AddRange(response.Items);
        }

        IsLoadingMoreSessions = false;
    }

    private async Task SaveUser()
    {
        if (UserData == null) return;

        try
        {
            IsSaving = true;
            var result = await UserService.UpdateMeAsync(new UserPutModel()
            {
                Name = UserData.Name,
                Surname = UserData.Surname,
                UpdatedAt = DateTime.UtcNow
            });
            AlertData = new()
            {
                IsVisible = true,
                Style = result.StatusCode is >= 200 and < 300 ? AlertTypeEnum.Information : AlertTypeEnum.Danger,
                Message = result.StatusCode is >= 200 and < 300 ? "Profile updated successfully." : result.Message,
                Title = result.StatusCode is >= 200 and < 300 ? "Saved" : "Save Failed",
                Position = AlertStylePositionEnum.BottomRight
            };
        }
        catch (Exception ex)
        {
            AlertData = new()
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = $"An error occurred: {ex.Message}",
                Title = "Error",
                Position = AlertStylePositionEnum.BottomRight
            };
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task UploadProfilePicture(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            IsSaving = true;

            // Limit size to 5 MB for example
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var result = await UserService.UpdateProfilePictureAsync(stream, file.Name, file.ContentType);

            if (result.StatusCode is >= 200 and < 300)
            {
                await LoadUserData();

                AlertData = new()
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Information,
                    Message = "Profile picture updated successfully.",
                    Title = "Success",
                    Position = AlertStylePositionEnum.BottomRight
                };
            }
            else
            {
                AlertData = new()
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = result.Message ?? "Failed to update profile picture.",
                    Title = "Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
            }
        }
        catch (Exception ex)
        {
            AlertData = new()
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = $"An error occurred: {ex.Message}",
                Title = "Error",
                Position = AlertStylePositionEnum.BottomRight
            };
        }
        finally
        {
            IsSaving = false;
        }
    }


    private async Task LogoutDevice(string deviceId)
    {
        try
        {
            IsProcessing = true;
            var response = await AuthService.LogoutAsync(deviceId);
            if (response.StatusCode is >= 200 and < 300)
            {
                Sessions = Sessions.Where(s => s.DeviceId != deviceId).ToList();
            }
            else
            {
                AlertData2 = new()
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = "Failed to logout device. Please try again.",
                    Title = "Logout Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
            }
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task LogoutAllDevices()
    {
        try
        {
            IsProcessing = true;
            var response = await AuthService.LogoutAllAsync();
            if (response.StatusCode is >= 200 and < 300)
            {
                Sessions.Clear();
            }
            else
            {
                AlertData2 = new()
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = "Failed to logout all devices.",
                    Title = "Logout Error",
                    Position = AlertStylePositionEnum.BottomRight
                };
            }
        }
        finally
        {
            IsProcessing = false;
        }
    }
}