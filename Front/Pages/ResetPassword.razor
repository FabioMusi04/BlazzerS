@page "/reset-password"
@inject NavigationManager NavigationManager
@inject UserService UserService

<PageTitle>Reset Password</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-900 px-4">
    <div class="w-full max-w-md p-8 bg-gray-800 rounded-2xl shadow-2xl text-gray-200">
        <h2 class="text-2xl font-bold text-center mb-6">Reset Password</h2>

        @if (!string.IsNullOrEmpty(token))
        {
            if (!tokenValid)
            {
                <div class="text-center">
                    <p class="text-gray-400">Verifying token...</p>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-500 mt-2">@errorMessage</p>
                    }
                </div>
            }
            else if (isSuccess)
            {
                <div class="text-center text-green-400">
                    <p>Password reset successfully!</p>
                    <a href="/login" class="text-indigo-400 underline mt-2 inline-block">Login here</a>
                </div>
            }
            else
            {
                <EditForm Model="@resetModel" OnValidSubmit="OnResetSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500 mb-4" />

                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-1">New Password</label>
                        <InputText @bind-Value="resetModel.NewPassword" type="password"
                                   class="w-full px-4 py-2 rounded border border-gray-700 bg-gray-700 text-gray-200 focus:outline-none focus:ring-2 focus:ring-green-400"
                                   disabled="@isLoading" />
                        <ValidationMessage For="@(() => resetModel.NewPassword)" class="text-red-500 text-sm" />
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-1">Confirm Password</label>
                        <InputText @bind-Value="resetModel.ConfirmPassword" type="password"
                                   class="w-full px-4 py-2 rounded border border-gray-700 bg-gray-700 text-gray-200 focus:outline-none focus:ring-2 focus:ring-green-400"
                                   disabled="@isLoading" />
                        <ValidationMessage For="@(() => resetModel.ConfirmPassword)" class="text-red-500 text-sm" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-500 text-sm mb-4">@errorMessage</p>
                    }

                    <button type="submit"
                            class="w-full py-3 bg-gradient-to-r from-green-600 to-green-700 font-semibold rounded shadow hover:from-green-700 hover:to-green-800 transition duration-200 flex justify-center items-center"
                            disabled="@isLoading">
                        @if (isLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                            </svg>
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </EditForm>
            }
        }
        else
        {
            if (emailSent)
            {
                <p class="text-green-400 text-center">
                    If the email is registered, a reset link has been sent. Please check your inbox.
                </p>
            }
            else
            {
                <EditForm Model="@emailModel" OnValidSubmit="OnEmailSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500 mb-4" />

                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-1">Email Address</label>
                        <InputText @bind-Value="emailModel" type="email"
                                   class="w-full px-4 py-2 rounded border border-gray-700 bg-gray-700 text-gray-200 focus:outline-none focus:ring-2 focus:ring-green-400"
                                   disabled="@isLoading" />
                        <ValidationMessage For="@(() => emailModel)" class="text-red-500 text-sm" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-red-500 text-sm mb-4">@errorMessage</p>
                    }

                    <button type="submit"
                            class="w-full py-3 bg-gradient-to-r from-green-600 to-green-700 font-semibold rounded shadow hover:from-green-700 hover:to-green-800 transition duration-200 flex justify-center items-center"
                            disabled="@isLoading">
                        @if (isLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                            </svg>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <span>Send Reset Link</span>
                        }
                    </button>
                </EditForm>
            }
        }
    </div>
</div>

@code {
    private string? token;
    private bool tokenValid;
    private bool isSuccess;
    private bool emailSent;
    private string? errorMessage;

    private ResetPasswordFormModel resetModel = new();
    private string emailModel = string.Empty;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        token = query["token"];

        if (!string.IsNullOrEmpty(token))
        {
            SetLoading(true);
            UserResponse response = await UserService.VerifyResetPasswordTokenAsync(token);
            tokenValid = response.StatusCode >= 200 && response.StatusCode < 300;
            if (!tokenValid)
            {
                errorMessage = response.Message;
            }
            SetLoading(false);
        }
    }

    private async Task OnEmailSubmit()
    {
        errorMessage = null;
        emailSent = false;
        SetLoading(true);

        UserResponse response = await UserService.CreateResetPasswordAsync(emailModel);

        if (response.StatusCode >= 200 && response.StatusCode < 300)
        {
            emailSent = true;
        }
        else
        {
            errorMessage = response.Message;
        }
        SetLoading(false);
    }

    private async Task OnResetSubmit()
    {
        errorMessage = null;

        if (resetModel.NewPassword != resetModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Missing reset token.";
            return;
        }

        SetLoading(true);
        var response = await UserService.ResetPasswordAsync(token, resetModel.NewPassword);

        if (response.StatusCode >= 200 && response.StatusCode < 300)
        {
            isSuccess = true;
        }
        else
        {
            errorMessage = response.Message;
        }
        SetLoading(false);
    }

    private void SetLoading(bool value)
    {
        isLoading = value;
        StateHasChanged();
    }
}
