@page "/login"

@using Models.front
@using Models.http
@using Front.Shared

@inject AuthService authService
@inject EmailVerificationTokenService tokenVerificationService
@inject NavigationManager Navigation
@inject CustomAuthStateProvider authStateProvider

<div class="min-h-screen flex items-center justify-center bg-gray-800 px-4">
    <Alert AlertData="@AlertData" OnDismissed="@(() => AlertData.IsVisible = false)" />
    <Alert AlertData="@AlertData2" OnDismissed="@(() => AlertData2.IsVisible = false)" />
    <LoginForm OnLogin="HandleLogin" />
</div>

@code {

    private int userId = -1;
    private AlertModel AlertData = new();
    private AlertModel AlertData2 = new();

    private async Task HandleLogin(LoginFormModel model)
    {
        LoginResponse result = await authService.LoginAsync(model.Email, model.Password);

        if (result is { StatusCode: >= 200 and <= 299 })
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "Login successful!",
                Title = "Welcome",
                Position = AlertStylePositionEnum.BottomRight,
            };

            await authStateProvider.ForceAuthenticationStateRefreshAsync();

            if (result.User.Role == UserRoleEnum.Admin)
                Navigation.NavigateTo("/dashboard");
            else
                Navigation.NavigateTo("/home");
        }
        else
        {
            AlertData = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = result?.Message ?? "Login failed. Please try again.",
                Title = "Login Error",
                Position = AlertStylePositionEnum.BottomRight,
            };

            if (result?.StatusCode == 403 && result.User is not null)
            {
                userId = result.User.Id;

                AlertData = new AlertModel
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Information,
                    Message = "Login successful! Please check your email to confirm your account. If you didnâ€™t receive it, click below to resend.",
                    Title = "Confirm your email",
                    Position = AlertStylePositionEnum.Center,
                    HasActions = true,
                    OkText = "Resend Email",
                    CancelText = "Close",
                    OnOk = EventCallback.Factory.Create(this, ResendVerificationEmail),
                    OnCancel = EventCallback.Factory.Create(this, () => AlertData2.IsVisible = false)
                };
            }
        }
    }

    private async Task ResendVerificationEmail()
    {
        try
        {
            if (userId == -1)
            {
                AlertData2 = new AlertModel
                {
                    IsVisible = true,
                    Style = AlertTypeEnum.Danger,
                    Message = "Cannot resend verification email.",
                    Title = "Problem",
                    Position = AlertStylePositionEnum.BottomRight,
                };
                return;
            }

            await tokenVerificationService.RetryVerificationAsync(userId);

            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Information,
                Message = "Verification email resent successfully!",
                Title = "Email Resent",
                Position = AlertStylePositionEnum.BottomRight,
            };
        }
        catch (Exception ex)
        {
            AlertData2 = new AlertModel
            {
                IsVisible = true,
                Style = AlertTypeEnum.Danger,
                Message = $"Failed to resend verification email: {ex.Message}",
                Title = "Error",
                Position = AlertStylePositionEnum.BottomRight,
            };
        }
    }
}
